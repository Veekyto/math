import random


shortest_distance=[[0,0.7,1.4,1.9,3,3.5,0.6,1.2,1.8,2.5,3.1,3.9,0.9,2.4,2.9,3.2,4,2,3.7,4.4,5.3,5.4,2.5,4.5,5.1,5.3,5.9,6,3.3,4,4.6,5.2,5.6,5.9],
                   [0.7,0,0.7,1.2,2.3,2.8,1.1,0.5,1.1,1.8,2.4,3.2,1.4,1.7,2.2,2.5,3.3,2.5,3.5,4.2,4.6,4.7,3,4.3,4.9,5.1,5.4,5.3,3.8,4.5,5.1,5.7,6.1,5.8],
                   [1.4,0.7,0,0.5,1.6,2.1,1.8,1.2,0.4,1.1,1.7,2.5,2.1,2.4,1.5,1.8,2.6,3.2,4.2,3.7,3.9,4,3.7,5,4.4,4.6,4.7,4.6,4.5,5.2,5.4,5.2,5.4,5.1],
                   [1.9,1.2,0.5,0,1.1,1.6,2.3,1.7,0.9,0.9,1.4,2,2.6,2.9,1.3,1.6,2.4,3.7,4.7,4.2,3.7,3.8,4.2,5.5,4.9,5,4.5,4.4,5,5.7,5.9,5.6,5.2,4.9],
                   [3,2.3,1.6,1.1,0,0.5,3.3,2.7,1.6,0.9,0.3,0.9,3.6,3.6,1.3,1.4,1.8,4.7,5.2,4.5,3.5,3.2,5.2,6,5.2,4.8,4.3,3.8,6,6.2,5.6,5,4.6,4.3],
                   [3.5,2.8,2.1,1.6,0.5,0,3.8,3.2,2.1,1.4,0.8,0.4,4.1,4.1,1.8,1.9,1.3,5.2,5.3,4.6,3.4,2.7,5.7,5.9,4.9,4.4,3.8,3.3,6.4,5.7,5.1,4.5,4.1,3.8],
                   [0.6,1.1,1.8,2.3,3.3,3.8,0,0.6,1.7,2.4,3,3.9,0.3,1.8,2.8,3.1,3.9,1.4,3.1,3.8,5,5.3,1.9,3.9,4.5,4.7,5.3,5.8,2.7,3.4,4,4.6,5,5.3],
                   [1.2,0.5,1.2,1.7,2.7,3.2,0.6,0,1.1,1.8,2.4,3.3,0.9,1.2,2.2,2.5,3.3,2,3,3.7,4.6,4.7,2.5,3.8,4.4,4.6,5.2,5.3,3.3,4,4.6,5.2,5.6,5.8],
                   [1.8,1.1,0.4,0.9,1.6,2.1,1.7,1.1,0,0.7,1.3,2.2,2,2.3,1.1,1.4,2.2,3.1,4,3.3,3.5,3.6,3.6,4.8,4,4.2,4.3,4.2,4.4,5.1,5,4.8,5,4.7],
                   [2.5,1.8,1.1,0.9,0.9,1.4,2.4,1.8,0.7,0,0.6,1.5,2.7,2.7,0.4,0.7,1.5,3.8,4.3,3.6,2.8,2.9,4.3,5.1,4.3,4.1,3.6,3.5,5.1,5.8,5.3,4.7,4.3,4],
                   [3.1,2.4,1.7,1.4,0.3,0.8,3,2.4,1.3,0.6,0,0.9,3.3,3.3,1,1.1,1.8,4.4,4.9,4.2,3.2,3.2,4.9,5.7,4.9,4.5,4,3.8,5.7,6.2,5.6,5,4.6,4.3],
                   [3.9,3.2,2.5,2,0.9,0.4,3.9,3.3,2.2,1.5,0.9,0,4.2,4.2,1.9,1.7,0.9,5.3,4.9,4.2,3,2.3,5.8,5.5,4.5,4,3.4,2.9,6,5.3,4.7,4.1,3.7,3.4],
                   [0.9,1.4,2.1,2.6,3.6,4.1,0.3,0.9,2,2.7,3.3,4.2,0,1.5,3.1,3.4,4.2,1.1,2.8,3.5,4.7,5.4,1.6,3.6,4.2,4.4,5,5.5,2.4,3.1,3.7,4.3,4.7,5],
                   [2.4,1.7,2.4,2.9,3.6,4.1,1.8,1.2,2.3,2.7,3.3,4.2,1.5,0,2.3,2.6,3.4,2.6,1.8,2.5,3.7,4.4,3.1,2.6,3.2,3.4,4,4.5,3.9,3.6,4.2,4,4.4,4.7],
                   [2.9,2.2,1.5,1.3,1.3,1.8,2.8,2.2,1.1,0.4,1,1.9,3.1,2.3,0,0.3,1.1,4.2,3.9,3.2,2.4,2.5,4.7,4.7,3.9,3.7,3.2,3.1,5.5,5.5,4.9,4.3,3.9,3.6],
                   [3.2,2.5,1.8,1.6,1.4,1.9,3.1,2.5,1.4,0.7,1.1,1.7,3.4,2.6,0.3,0,0.8,4.5,4,3.3,2.1,2.2,5,4.8,3.9,3.4,2.9,2.8,5.8,5.2,4.6,4,3.6,3.3],
                   [4,3.3,2.6,2.4,1.8,1.3,3.9,3.3,2.2,1.5,1.8,0.9,4.2,3.4,1.1,0.8,0,5.3,4,3.3,2.1,1.4,5.8,4.6,3.6,3.1,2.5,2,5.1,4.4,3.8,3.2,2.8,2.5],
                   [2,2.5,3.2,3.7,4.7,5.2,1.4,2,3.1,3.8,4.4,5.3,1.1,2.6,4.2,4.5,5.3,0,1.7,2.4,3.6,4.3,0.5,2.5,3.1,3.3,3.9,4.4,1.3,2,2.6,3.2,3.6,3.9],
                   [3.7,3.5,4.2,4.7,5.2,5.3,3.1,3,4,4.3,4.9,4.9,2.8,1.8,3.9,4,4,1.7,0,0.7,1.9,2.6,2.2,0.8,1.4,1.6,2.2,2.7,2.5,1.8,2.4,2.2,2.6,2.9],
                   [4.4,4.2,3.7,4.2,4.5,4.6,3.8,3.7,3.3,3.6,4.2,4.2,3.5,2.5,3.2,3.3,3.3,2.4,0.7,0,1.2,1.9,2.9,1.5,0.7,0.9,1.5,2,3,2.3,1.7,1.5,1.9,2.2],
                   [5.3,4.6,3.9,3.7,3.5,3.4,5,4.6,3.5,2.8,3.2,3,4.7,3.7,2.4,2.1,2.1,3.6,1.9,1.2,0,0.7,4.1,2.7,1.8,1.3,0.8,1.3,3.8,3.1,2.5,1.9,1.9,1.8],
                   [5.4,4.7,4,3.8,3.2,2.7,5.3,4.7,3.6,2.9,3.2,2.3,5.4,4.4,2.5,2.2,1.4,4.3,2.6,1.9,0.7,0,4.5,3.2,2.2,1.7,1.1,0.6,3.7,3,2.4,1.8,1.4,1.1],
                   [2.5,3,3.7,4.2,5.2,5.7,1.9,2.5,3.6,4.3,4.9,5.8,1.6,3.1,4.7,5,5.8,0.5,2.2,2.9,4.1,4.5,0,2,3,3.3,3.9,3.9,0.8,1.5,2.1,2.7,3.1,3.4],
                   [4.5,4.3,5,5.5,6,5.9,3.9,3.8,4.8,5.1,5.7,5.5,3.6,2.6,4.7,4.8,4.6,2.5,0.8,1.5,2.7,3.2,2,0,1,1.5,2.1,2.6,1.7,1,1.6,2.1,2.5,2.8],
                   [5.1,4.9,4.4,4.9,5.2,4.9,4.5,4.4,4,4.3,4.9,4.5,4.2,3.2,3.9,3.9,3.6,3.1,1.4,0.7,1.8,2.2,3,1,0,0.5,1.1,1.6,2.3,1.6,1,1.1,1.5,1.8],
                   [5.3,5.1,4.6,5,4.8,4.4,4.7,4.6,4.2,4.1,4.5,4,4.4,3.4,3.7,3.4,3.1,3.3,1.6,0.9,1.3,1.7,3.3,1.5,0.5,0,0.6,1.1,2.5,1.8,1.2,0.6,1,1.3],
                   [5.9,5.4,4.7,4.5,4.3,3.8,5.3,5.2,4.3,3.6,4,3.4,5,4,3.2,2.9,2.5,3.9,2.2,1.5,0.8,1.1,3.9,2.1,1.1,0.6,0,0.5,3.1,2.4,1.8,1.2,1.1,1],
                   [6,5.3,4.6,4.4,3.8,3.3,5.8,5.3,4.2,3.5,3.8,2.9,5.5,4.5,3.1,2.8,2,4.4,2.7,2,1.3,0.6,3.9,2.6,1.6,1.1,0.5,0,3.1,2.4,1.8,1.2,0.8,0.5],
                   [3.3,3.8,4.5,5,6,6.4,2.7,3.3,4.4,5.1,5.7,6,2.4,3.9,5.5,5.8,5.1,1.3,2.5,3,3.8,3.7,0.8,1.7,2.3,2.5,3.1,3.1,0,0.7,1.3,1.9,2.3,2.6],
                   [4,4.5,5.2,5.7,6.2,5.7,3.4,4,5.1,5.8,6.2,5.3,3.1,3.6,5.5,5.2,4.4,2,1.8,2.3,3.1,3,1.5,1,1.6,1.8,2.4,2.4,0.7,0,0.6,1.2,1.6,1.9],
                   [4.6,5.1,5.4,5.9,5.6,5.1,4,4.6,5,5.3,5.6,4.7,3.7,4.2,4.9,4.6,3.8,2.6,2.4,1.7,2.5,2.4,2.1,1.6,1,1.2,1.8,1.8,1.3,0.6,0,0.6,1,1.3],
                   [5.2,5.7,5.2,5.6,5,4.5,4.6,5.2,4.8,4.7,5,4.1,4.3,4,4.3,4,3.2,3.2,2.2,1.5,1.9,1.8,2.7,2.1,1.1,0.6,1.2,1.2,1.9,1.2,0.6,0,0.4,0.7],
                   [5.6,6.1,5.4,5.2,4.6,4.1,5,5.6,5,4.3,4.6,3.7,4.7,4.4,3.9,3.6,2.8,3.6,2.6,1.9,1.9,1.4,3.1,2.5,1.5,1,1.1,0.8,2.3,1.6,1,0.4,0,0.3],
                   [5.9,5.8,5.1,4.9,4.3,3.8,5.3,5.8,4.7,4,4.3,3.4,5,4.7,3.6,3.3,2.5,3.9,2.9,2.2,1.8,1.1,3.4,2.8,1.8,1.3,1,0.5,2.6,1.9,1.3,0.7,0.3,0]
                   ]

capacity=[0,6,4,7,5,3,3,5,3,4,3,4,4,2,2,8,2,2,4,0,3,1,5,3,6,5,6,5,6,6,2,6,2,0]

class Robot:
    def __init__(self,location,speed):
        self.location=location
        self.speed=speed
        self.time=0



class Individual:
    def __init__(self):
        self.cost=0
        self.path=[]
        
#得到不包含充电桩(0,33)和图书馆(19)的初始随机路径
def init_population(pop_size=60,num=34):
    population=[]
    for i in range(pop_size):
        individual=Individual()
        for j in range(num):
            if j not in [0,19,33]:
                individual.path.append(j)
        random.shuffle(individual.path)
        population.append(individual)
    return population

#得到实际路径，机器人书量到达10则返回图书馆
def get_actual_path(lst, threshold=10):
    result = []
    temp_sum = 0
    for num in lst:
        temp_sum += capacity[num]
        if temp_sum > threshold:
            result.append(19)
            temp_sum = capacity[num]  
        result.append(num)
    return result

#得到每个个体的代价
def set_cost(individual,robot1,robot2):
    actual_path=get_actual_path(individual.path)
    robot1.time=0
    robot2.time=0
    leisure_robot=(lambda x, y: x if x.time < y.time else y)(robot1, robot2)
    for i in actual_path:
        leisure_robot.time+=shortest_distance[leisure_robot.location][i]/leisure_robot.speed
        leisure_robot.location=i
        if i==19:
            leisure_robot=(lambda x, y: x if x.time < y.time else y)(robot1, robot2)
    individual.cost=max(robot1.time,robot2.time)    

robotA=Robot(location=33,speed=8)
robotB=Robot(location=0,speed=10)
population=init_population()
for individual in population:
    print(individual.path)
    set_cost(individual,robotA,robotB)
    print(individual.cost)

