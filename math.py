import random
import copy
import numpy as np
import matplotlib.pyplot as plt

shortest_distance=[[0,0.7,1.4,1.9,3,3.5,0.6,1.2,1.8,2.5,3.1,3.9,0.9,2.4,2.9,3.2,4,2,3.7,4.4,5.3,5.4,2.5,4.5,5.1,5.3,5.9,6,3.3,4,4.6,5.2,5.6,5.9],
                   [0.7,0,0.7,1.2,2.3,2.8,1.1,0.5,1.1,1.8,2.4,3.2,1.4,1.7,2.2,2.5,3.3,2.5,3.5,4.2,4.6,4.7,3,4.3,4.9,5.1,5.4,5.3,3.8,4.5,5.1,5.7,6.1,5.8],
                   [1.4,0.7,0,0.5,1.6,2.1,1.8,1.2,0.4,1.1,1.7,2.5,2.1,2.4,1.5,1.8,2.6,3.2,4.2,3.7,3.9,4,3.7,5,4.4,4.6,4.7,4.6,4.5,5.2,5.4,5.2,5.4,5.1],
                   [1.9,1.2,0.5,0,1.1,1.6,2.3,1.7,0.9,0.9,1.4,2,2.6,2.9,1.3,1.6,2.4,3.7,4.7,4.2,3.7,3.8,4.2,5.5,4.9,5,4.5,4.4,5,5.7,5.9,5.6,5.2,4.9],
                   [3,2.3,1.6,1.1,0,0.5,3.3,2.7,1.6,0.9,0.3,0.9,3.6,3.6,1.3,1.4,1.8,4.7,5.2,4.5,3.5,3.2,5.2,6,5.2,4.8,4.3,3.8,6,6.2,5.6,5,4.6,4.3],
                   [3.5,2.8,2.1,1.6,0.5,0,3.8,3.2,2.1,1.4,0.8,0.4,4.1,4.1,1.8,1.9,1.3,5.2,5.3,4.6,3.4,2.7,5.7,5.9,4.9,4.4,3.8,3.3,6.4,5.7,5.1,4.5,4.1,3.8],
                   [0.6,1.1,1.8,2.3,3.3,3.8,0,0.6,1.7,2.4,3,3.9,0.3,1.8,2.8,3.1,3.9,1.4,3.1,3.8,5,5.3,1.9,3.9,4.5,4.7,5.3,5.8,2.7,3.4,4,4.6,5,5.3],
                   [1.2,0.5,1.2,1.7,2.7,3.2,0.6,0,1.1,1.8,2.4,3.3,0.9,1.2,2.2,2.5,3.3,2,3,3.7,4.6,4.7,2.5,3.8,4.4,4.6,5.2,5.3,3.3,4,4.6,5.2,5.6,5.8],
                   [1.8,1.1,0.4,0.9,1.6,2.1,1.7,1.1,0,0.7,1.3,2.2,2,2.3,1.1,1.4,2.2,3.1,4,3.3,3.5,3.6,3.6,4.8,4,4.2,4.3,4.2,4.4,5.1,5,4.8,5,4.7],
                   [2.5,1.8,1.1,0.9,0.9,1.4,2.4,1.8,0.7,0,0.6,1.5,2.7,2.7,0.4,0.7,1.5,3.8,4.3,3.6,2.8,2.9,4.3,5.1,4.3,4.1,3.6,3.5,5.1,5.8,5.3,4.7,4.3,4],
                   [3.1,2.4,1.7,1.4,0.3,0.8,3,2.4,1.3,0.6,0,0.9,3.3,3.3,1,1.1,1.8,4.4,4.9,4.2,3.2,3.2,4.9,5.7,4.9,4.5,4,3.8,5.7,6.2,5.6,5,4.6,4.3],
                   [3.9,3.2,2.5,2,0.9,0.4,3.9,3.3,2.2,1.5,0.9,0,4.2,4.2,1.9,1.7,0.9,5.3,4.9,4.2,3,2.3,5.8,5.5,4.5,4,3.4,2.9,6,5.3,4.7,4.1,3.7,3.4],
                   [0.9,1.4,2.1,2.6,3.6,4.1,0.3,0.9,2,2.7,3.3,4.2,0,1.5,3.1,3.4,4.2,1.1,2.8,3.5,4.7,5.4,1.6,3.6,4.2,4.4,5,5.5,2.4,3.1,3.7,4.3,4.7,5],
                   [2.4,1.7,2.4,2.9,3.6,4.1,1.8,1.2,2.3,2.7,3.3,4.2,1.5,0,2.3,2.6,3.4,2.6,1.8,2.5,3.7,4.4,3.1,2.6,3.2,3.4,4,4.5,3.9,3.6,4.2,4,4.4,4.7],
                   [2.9,2.2,1.5,1.3,1.3,1.8,2.8,2.2,1.1,0.4,1,1.9,3.1,2.3,0,0.3,1.1,4.2,3.9,3.2,2.4,2.5,4.7,4.7,3.9,3.7,3.2,3.1,5.5,5.5,4.9,4.3,3.9,3.6],
                   [3.2,2.5,1.8,1.6,1.4,1.9,3.1,2.5,1.4,0.7,1.1,1.7,3.4,2.6,0.3,0,0.8,4.5,4,3.3,2.1,2.2,5,4.8,3.9,3.4,2.9,2.8,5.8,5.2,4.6,4,3.6,3.3],
                   [4,3.3,2.6,2.4,1.8,1.3,3.9,3.3,2.2,1.5,1.8,0.9,4.2,3.4,1.1,0.8,0,5.3,4,3.3,2.1,1.4,5.8,4.6,3.6,3.1,2.5,2,5.1,4.4,3.8,3.2,2.8,2.5],
                   [2,2.5,3.2,3.7,4.7,5.2,1.4,2,3.1,3.8,4.4,5.3,1.1,2.6,4.2,4.5,5.3,0,1.7,2.4,3.6,4.3,0.5,2.5,3.1,3.3,3.9,4.4,1.3,2,2.6,3.2,3.6,3.9],
                   [3.7,3.5,4.2,4.7,5.2,5.3,3.1,3,4,4.3,4.9,4.9,2.8,1.8,3.9,4,4,1.7,0,0.7,1.9,2.6,2.2,0.8,1.4,1.6,2.2,2.7,2.5,1.8,2.4,2.2,2.6,2.9],
                   [4.4,4.2,3.7,4.2,4.5,4.6,3.8,3.7,3.3,3.6,4.2,4.2,3.5,2.5,3.2,3.3,3.3,2.4,0.7,0,1.2,1.9,2.9,1.5,0.7,0.9,1.5,2,3,2.3,1.7,1.5,1.9,2.2],
                   [5.3,4.6,3.9,3.7,3.5,3.4,5,4.6,3.5,2.8,3.2,3,4.7,3.7,2.4,2.1,2.1,3.6,1.9,1.2,0,0.7,4.1,2.7,1.8,1.3,0.8,1.3,3.8,3.1,2.5,1.9,1.9,1.8],
                   [5.4,4.7,4,3.8,3.2,2.7,5.3,4.7,3.6,2.9,3.2,2.3,5.4,4.4,2.5,2.2,1.4,4.3,2.6,1.9,0.7,0,4.5,3.2,2.2,1.7,1.1,0.6,3.7,3,2.4,1.8,1.4,1.1],
                   [2.5,3,3.7,4.2,5.2,5.7,1.9,2.5,3.6,4.3,4.9,5.8,1.6,3.1,4.7,5,5.8,0.5,2.2,2.9,4.1,4.5,0,2,3,3.3,3.9,3.9,0.8,1.5,2.1,2.7,3.1,3.4],
                   [4.5,4.3,5,5.5,6,5.9,3.9,3.8,4.8,5.1,5.7,5.5,3.6,2.6,4.7,4.8,4.6,2.5,0.8,1.5,2.7,3.2,2,0,1,1.5,2.1,2.6,1.7,1,1.6,2.1,2.5,2.8],
                   [5.1,4.9,4.4,4.9,5.2,4.9,4.5,4.4,4,4.3,4.9,4.5,4.2,3.2,3.9,3.9,3.6,3.1,1.4,0.7,1.8,2.2,3,1,0,0.5,1.1,1.6,2.3,1.6,1,1.1,1.5,1.8],
                   [5.3,5.1,4.6,5,4.8,4.4,4.7,4.6,4.2,4.1,4.5,4,4.4,3.4,3.7,3.4,3.1,3.3,1.6,0.9,1.3,1.7,3.3,1.5,0.5,0,0.6,1.1,2.5,1.8,1.2,0.6,1,1.3],
                   [5.9,5.4,4.7,4.5,4.3,3.8,5.3,5.2,4.3,3.6,4,3.4,5,4,3.2,2.9,2.5,3.9,2.2,1.5,0.8,1.1,3.9,2.1,1.1,0.6,0,0.5,3.1,2.4,1.8,1.2,1.1,1],
                   [6,5.3,4.6,4.4,3.8,3.3,5.8,5.3,4.2,3.5,3.8,2.9,5.5,4.5,3.1,2.8,2,4.4,2.7,2,1.3,0.6,3.9,2.6,1.6,1.1,0.5,0,3.1,2.4,1.8,1.2,0.8,0.5],
                   [3.3,3.8,4.5,5,6,6.4,2.7,3.3,4.4,5.1,5.7,6,2.4,3.9,5.5,5.8,5.1,1.3,2.5,3,3.8,3.7,0.8,1.7,2.3,2.5,3.1,3.1,0,0.7,1.3,1.9,2.3,2.6],
                   [4,4.5,5.2,5.7,6.2,5.7,3.4,4,5.1,5.8,6.2,5.3,3.1,3.6,5.5,5.2,4.4,2,1.8,2.3,3.1,3,1.5,1,1.6,1.8,2.4,2.4,0.7,0,0.6,1.2,1.6,1.9],
                   [4.6,5.1,5.4,5.9,5.6,5.1,4,4.6,5,5.3,5.6,4.7,3.7,4.2,4.9,4.6,3.8,2.6,2.4,1.7,2.5,2.4,2.1,1.6,1,1.2,1.8,1.8,1.3,0.6,0,0.6,1,1.3],
                   [5.2,5.7,5.2,5.6,5,4.5,4.6,5.2,4.8,4.7,5,4.1,4.3,4,4.3,4,3.2,3.2,2.2,1.5,1.9,1.8,2.7,2.1,1.1,0.6,1.2,1.2,1.9,1.2,0.6,0,0.4,0.7],
                   [5.6,6.1,5.4,5.2,4.6,4.1,5,5.6,5,4.3,4.6,3.7,4.7,4.4,3.9,3.6,2.8,3.6,2.6,1.9,1.9,1.4,3.1,2.5,1.5,1,1.1,0.8,2.3,1.6,1,0.4,0,0.3],
                   [5.9,5.8,5.1,4.9,4.3,3.8,5.3,5.8,4.7,4,4.3,3.4,5,4.7,3.6,3.3,2.5,3.9,2.9,2.2,1.8,1.1,3.4,2.8,1.8,1.3,1,0.5,2.6,1.9,1.3,0.7,0.3,0]
                   ]
shortest_path=[[[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,6],[0,1,7],[0,1,2,8],[0,1,2,8,9],[0,1,2,8,9,10],[0,1,2,3,4,5,11],[0,6,12],[0,1,7,13],[0,1,2,8,9,14],[0,1,2,8,9,14,15],[0,1,2,8,9,14,15,16],[0,6,12,17],[0,6,12,17,18],[0,6,12,17,18,19],[0,1,2,8,9,14,15,20],[0,1,2,8,9,14,15,16,21],[0,6,12,17,22],[0,6,12,17,18,23],[0,6,12,17,18,19,24],[0,6,12,17,18,19,25],[0,6,12,17,18,19,25,26],[0,1,2,8,9,14,15,16,21,27],[0,6,12,17,22,28],[0,6,12,17,22,28,29],[0,6,12,17,22,28,29,30],[0,6,12,17,22,28,29,30,31],[0,6,12,17,22,28,29,30,31,32],[0,6,12,17,22,28,29,30,31,32,33]],
      [[1,0],[1],[1,2],[1,2,3],[1,2,3,4],[1,2,3,4,5],[1,7,6],[1,7],[1,2,8],[1,2,8,9],[1,2,8,9,10],[1,2,3,4,5,11],[1,7,6,12],[1,7,13],[1,2,8,9,14],[1,2,8,9,14,15],[1,2,8,9,14,15,16],[1,7,6,12,17],[1,7,13,18],[1,7,13,18,19],[1,2,8,9,14,15,20],[1,2,8,9,14,15,16,21],[1,7,6,12,17,22],[1,7,13,18,23],[1,7,13,18,19,24],[1,7,13,18,19,25],[1,2,8,9,14,15,20,26],[1,2,8,9,14,15,16,21,27],[1,7,6,12,17,22,28],[1,7,6,12,17,22,28,29],[1,7,6,12,17,22,28,29,30],[1,7,6,12,17,22,28,29,30,31],[1,2,8,9,14,15,16,21,27,33,32],[1,2,8,9,14,15,16,21,27,33]],
      [[2,1,0],[2,1],[2],[2,3],[2,3,4],[2,3,4,5],[2,1,7,6],[2,1,7],[2,8],[2,8,9],[2,8,9,10],[2,3,4,5,11],[2,1,7,6,12],[2,1,7,13],[2,8,9,14],[2,8,9,14,15],[2,8,9,14,15,16],[2,1,7,6,12,17],[2,1,7,13,18],[2,8,19],[2,8,9,14,15,20],[2,8,9,14,15,16,21],[2,1,7,6,12,17,22],[2,1,7,13,18,23],[2,8,19,24],[2,8,19,25],[2,8,9,14,15,20,26],[2,8,9,14,15,16,21,27],[2,1,7,6,12,17,22,28],[2,1,7,6,12,17,22,28,29],[2,8,19,24,30],[2,8,19,25,31],[2,8,9,14,15,16,21,27,33,32],[2,8,9,14,15,16,21,27,33]],
      [[3,2,1,0],[3,2,1],[3,2],[3],[3,4],[3,4,5],[3,2,1,7,6],[3,2,1,7],[3,2,8],[3,9],[3,4,10],[3,4,5,11],[3,2,1,7,6,12],[3,2,1,7,13],[3,9,14],[3,9,14,15],[3,9,14,15,16],[3,2,1,7,6,12,17],[3,2,1,7,13,18],[3,2,8,19],[3,9,14,15,20],[3,9,14,15,16,21],[3,2,1,7,6,12,17,22],[3,2,1,7,13,18,23],[3,2,8,19,24],[3,9,14,15,20,25],[3,9,14,15,20,26],[3,9,14,15,16,21,27],[3,2,1,7,6,12,17,22,28],[3,2,1,7,6,12,17,22,28,29],[3,2,8,19,24,30],[3,9,14,15,20,25,31],[3,9,14,15,16,21,27,33,32],[3,9,14,15,16,21,27,33]],
      [[4,3,2,1,0],[4,3,2,1],[4,3,2],[4,3],[4],[4,5],[4,10,9,8,7,6],[4,10,9,8,7],[4,10,9,8],[4,10,9],[4,10],[4,5,11],[4,10,9,8,7,6,12],[4,10,9,14,13],[4,10,9,14],[4,10,15],[4,5,11,16],[4,10,9,8,7,6,12,17],[4,10,9,14,19,18],[4,10,9,14,19],[4,10,15,20],[4,5,11,16,21],[4,10,9,8,7,6,12,17,22],[4,10,9,14,19,18,23],[4,10,9,14,19,24],[4,10,15,20,25],[4,10,15,20,26],[4,5,11,16,21,27],[4,10,9,8,7,6,12,17,22,28],[4,5,11,16,21,27,33,32,31,30,29],[4,5,11,16,21,27,33,32,31,30],[4,5,11,16,21,27,33,32,31],[4,5,11,16,21,27,33,32],[4,5,11,16,21,27,33]],
      [[5,4,3,2,1,0],[5,4,3,2,1],[5,4,3,2],[5,4,3],[5,4],[5],[5,4,10,9,8,7,6],[5,4,10,9,8,7],[5,4,10,9,8],[5,4,10,9],[5,4,10],[5,11],[5,4,10,9,8,7,6,12],[5,4,10,9,14,13],[5,4,10,9,14],[5,4,10,15],[5,11,16],[5,4,10,9,8,7,6,12,17],[5,11,16,21,20,19,18],[5,11,16,21,20,19],[5,11,16,21,20],[5,11,16,21],[5,4,10,9,8,7,6,12,17,22],[5,11,16,21,27,26,25,24,23],[5,11,16,21,27,26,25,24],[5,11,16,21,27,26,25],[5,11,16,21,27,26],[5,11,16,21,27],[5,11,16,21,27,33,32,31,30,29,28],[5,11,16,21,27,33,32,31,30,29],[5,11,16,21,27,33,32,31,30],[5,11,16,21,27,33,32,31],[5,11,16,21,27,33,32],[5,11,16,21,27,33]],
      [[6,0],[6,7,1],[6,7,1,2],[6,7,1,2,3],[6,7,8,9,10,4],[6,7,8,9,10,4,5],[6],[6,7],[6,7,8],[6,7,8,9],[6,7,8,9,10],[6,7,8,9,10,11],[6,12],[6,7,13],[6,7,8,9,14],[6,7,8,9,14,15],[6,7,8,9,14,15,16],[6,12,17],[6,12,17,18],[6,12,17,18,19],[6,12,17,18,19,20],[6,7,8,9,14,15,16,21],[6,12,17,22],[6,12,17,18,23],[6,12,17,18,19,24],[6,12,17,18,19,25],[6,12,17,18,19,25,26],[6,12,17,18,19,25,26,27],[6,12,17,22,28],[6,12,17,22,28,29],[6,12,17,22,28,29,30],[6,12,17,22,28,29,30,31],[6,12,17,22,28,29,30,31,32],[6,12,17,22,28,29,30,31,32,33]],
      [[7,1,0],[7,1],[7,1,2],[7,1,2,3],[7,8,9,10,4],[7,8,9,10,4,5],[7,6],[7],[7,8],[7,8,9],[7,8,9,10],[7,8,9,10,11],[7,6,12],[7,13],[7,8,9,14],[7,8,9,14,15],[7,8,9,14,15,16],[7,6,12,17],[7,13,18],[7,13,18,19],[7,8,9,14,15,20],[7,8,9,14,15,16,21],[7,6,12,17,22],[7,13,18,23],[7,13,18,19,24],[7,13,18,19,25],[7,13,18,19,25,26],[7,8,9,14,15,16,21,27],[7,6,12,17,22,28],[7,6,12,17,22,28,29],[7,6,12,17,22,28,29,30],[7,6,12,17,22,28,29,30,31],[7,6,12,17,22,28,29,30,31,32],[7,8,9,14,15,16,21,27,33]],
      [[8,2,1,0],[8,2,1],[8,2],[8,2,3],[8,9,10,4],[8,9,10,4,5],[8,7,6],[8,7],[8],[8,9],[8,9,10],[8,9,10,11],[8,7,6,12],[8,7,13],[8,9,14],[8,9,14,15],[8,9,14,15,16],[8,7,6,12,17],[8,19,18],[8,19],[8,9,14,15,20],[8,9,14,15,16,21],[8,7,6,12,17,22],[8,19,18,23],[8,19,24],[8,19,25],[8,9,14,15,20,26],[8,9,14,15,16,21,27],[8,7,6,12,17,22,28],[8,7,6,12,17,22,28,29],[8,19,24,30],[8,19,25,31],[8,9,14,15,16,21,27,33,32],[8,9,14,15,16,21,27,33]],
      [[9,8,2,1,0],[9,8,2,1],[9,8,2],[9,3],[9,10,4],[9,10,4,5],[9,8,7,6],[9,8,7],[9,8],[9],[9,10],[9,10,11],[9,8,7,6,12],[9,14,13],[9,14],[9,14,15],[9,14,15,16],[9,8,7,6,12,17],[9,14,19,18],[9,14,19],[9,14,15,20],[9,14,15,16,21],[9,8,7,6,12,17,22],[9,14,19,18,23],[9,14,19,24],[9,14,15,20,25],[9,14,15,20,26],[9,14,15,16,21,27],[9,8,7,6,12,17,22,28],[9,8,7,6,12,17,22,28,29],[9,14,15,20,25,31,30],[9,14,15,20,25,31],[9,14,15,16,21,27,33,32],[9,14,15,16,21,27,33]],
      [[10,9,8,2,1,0],[10,9,8,2,1],[10,9,8,2],[10,4,3],[10,4],[10,4,5],[10,9,8,7,6],[10,9,8,7],[10,9,8],[10,9],[10],[10,11],[10,9,8,7,6,12],[10,9,14,13],[10,9,14],[10,15],[10,11,16],[10,9,8,7,6,12,17],[10,9,14,19,18],[10,9,14,19],[10,15,20],[10,11,16,21],[10,9,8,7,6,12,17,22],[10,9,14,19,18,23],[10,9,14,19,24],[10,15,20,25],[10,15,20,26],[10,11,16,21,27],[10,9,8,7,6,12,17,22,28],[10,11,16,21,27,33,32,31,30,29],[10,11,16,21,27,33,32,31,30],[10,11,16,21,27,33,32,31],[10,11,16,21,27,33,32],[10,11,16,21,27,33]],
      [[11,5,4,3,2,1,0],[11,5,4,3,2,1],[11,5,4,3,2],[11,5,4,3],[11,5,4],[11,5],[11,10,9,8,7,6],[11,10,9,8,7],[11,10,9,8],[11,10,9],[11,10],[11],[11,10,9,8,7,6,12],[11,10,9,14,13],[11,10,9,14],[11,16,15],[11,16],[11,10,9,8,7,6,12,17],[11,16,21,20,19,18],[11,16,21,20,19],[11,16,21,20],[11,16,21],[11,10,9,8,7,6,12,17,22],[11,16,21,27,26,25,24,23],[11,16,21,27,26,25,24],[11,16,21,27,26,25],[11,16,21,27,26],[11,16,21,27],[11,16,21,27,33,32,31,30,29,28],[11,16,21,27,33,32,31,30,29],[11,16,21,27,33,32,31,30],[11,16,21,27,33,32,31],[11,16,21,27,33,32],[11,16,21,27,33]],
      [[12,6,0],[12,6,7,1],[12,6,7,1,2],[12,6,7,1,2,3],[12,6,7,8,9,10,4],[12,6,7,8,9,10,4,5],[12,6],[12,6,7],[12,6,7,8],[12,6,7,8,9],[12,6,7,8,9,10],[12,6,7,8,9,10,11],[12],[12,13],[12,6,7,8,9,14],[12,6,7,8,9,14,15],[12,6,7,8,9,14,15,16],[12,17],[12,17,18],[12,17,18,19],[12,17,18,19,20],[12,17,18,19,20,21],[12,17,22],[12,17,18,23],[12,17,18,19,24],[12,17,18,19,25],[12,17,18,19,25,26],[12,17,18,19,25,26,27],[12,17,22,28],[12,17,22,28,29],[12,17,22,28,29,30],[12,17,22,28,29,30,31],[12,17,22,28,29,30,31,32],[12,17,22,28,29,30,31,32,33]],
      [[13,7,1,0],[13,7,1],[13,7,1,2],[13,7,1,2,3],[13,14,9,10,4],[13,14,9,10,4,5],[13,7,6],[13,7],[13,7,8],[13,14,9],[13,14,9,10],[13,14,9,10,11],[13,12],[13],[13,14],[13,14,15],[13,14,15,16],[13,12,17],[13,18],[13,18,19],[13,18,19,20],[13,18,19,20,21],[13,12,17,22],[13,18,23],[13,18,19,24],[13,18,19,25],[13,18,19,25,26],[13,18,19,25,26,27],[13,12,17,22,28],[13,18,23,29],[13,18,19,24,30],[13,18,19,25,31],[13,18,19,25,31,32],[13,18,19,25,31,32,33]],
      [[14,9,8,2,1,0],[14,9,8,2,1],[14,9,8,2],[14,9,3],[14,9,10,4],[14,9,10,4,5],[14,9,8,7,6],[14,9,8,7],[14,9,8],[14,9],[14,9,10],[14,9,10,11],[14,9,8,7,6,12],[14,13],[14],[14,15],[14,15,16],[14,9,8,7,6,12,17],[14,19,18],[14,19],[14,15,20],[14,15,16,21],[14,9,8,7,6,12,17,22],[14,19,18,23],[14,19,24],[14,15,20,25],[14,15,20,26],[14,15,16,21,27],[14,9,8,7,6,12,17,22,28],[14,15,20,25,31,30,29],[14,15,20,25,31,30],[14,15,20,25,31],[14,15,16,21,27,33,32],[14,15,16,21,27,33]],
      [[15,14,9,8,2,1,0],[15,14,9,8,2,1],[15,14,9,8,2],[15,14,9,3],[15,10,4],[15,10,4,5],[15,14,9,8,7,6],[15,14,9,8,7],[15,14,9,8],[15,14,9],[15,10],[15,16,11],[15,14,9,8,7,6,12],[15,14,13],[15,14],[15],[15,16],[15,14,9,8,7,6,12,17],[15,20,19,18],[15,20,19],[15,20],[15,16,21],[15,14,9,8,7,6,12,17,22],[15,20,19,18,23],[15,20,25,24],[15,20,25],[15,20,26],[15,16,21,27],[15,14,9,8,7,6,12,17,22,28],[15,20,25,31,30,29],[15,20,25,31,30],[15,20,25,31],[15,16,21,27,33,32],[15,16,21,27,33]],
      [[16,15,14,9,8,2,1,0],[16,15,14,9,8,2,1],[16,15,14,9,8,2],[16,15,14,9,3],[16,11,5,4],[16,11,5],[16,15,14,9,8,7,6],[16,15,14,9,8,7],[16,15,14,9,8],[16,15,14,9],[16,11,10],[16,11],[16,15,14,9,8,7,6,12],[16,15,14,13],[16,15,14],[16,15],[16],[16,15,14,9,8,7,6,12,17],[16,21,20,19,18],[16,21,20,19],[16,21,20],[16,21],[16,15,14,9,8,7,6,12,17,22],[16,21,27,26,25,24,23],[16,21,27,26,25,24],[16,21,27,26,25],[16,21,27,26],[16,21,27],[16,21,27,33,32,31,30,29,28],[16,21,27,33,32,31,30,29],[16,21,27,33,32,31,30],[16,21,27,33,32,31],[16,21,27,33,32],[16,21,27,33]],
      [[17,12,6,0],[17,12,6,7,1],[17,12,6,7,1,2],[17,12,6,7,1,2,3],[17,12,6,7,8,9,10,4],[17,12,6,7,8,9,10,4,5],[17,12,6],[17,12,6,7],[17,12,6,7,8],[17,12,6,7,8,9],[17,12,6,7,8,9,10],[17,12,6,7,8,9,10,11],[17,12],[17,12,13],[17,12,6,7,8,9,14],[17,12,6,7,8,9,14,15],[17,12,6,7,8,9,14,15,16],[17],[17,18],[17,18,19],[17,18,19,20],[17,18,19,20,21],[17,22],[17,18,23],[17,18,19,24],[17,18,19,25],[17,18,19,25,26],[17,18,19,25,26,27],[17,22,28],[17,22,28,29],[17,22,28,29,30],[17,22,28,29,30,31],[17,22,28,29,30,31,32],[17,22,28,29,30,31,32,33]],
      [[18,17,12,6,0],[18,13,7,1],[18,13,7,1,2],[18,13,7,1,2,3],[18,19,14,9,10,4],[18,19,20,21,16,11,5],[18,17,12,6],[18,13,7],[18,19,8],[18,19,14,9],[18,19,14,9,10],[18,19,20,21,16,11],[18,17,12],[18,13],[18,19,14],[18,19,20,15],[18,19,20,21,16],[18,17],[18],[18,19],[18,19,20],[18,19,20,21],[18,17,22],[18,23],[18,19,24],[18,19,25],[18,19,25,26],[18,19,25,26,27],[18,23,29,28],[18,23,29],[18,19,24,30],[18,19,25,31],[18,19,25,31,32],[18,19,25,31,32,33]],
      [[19,18,17,12,6,0],[19,18,13,7,1],[19,8,2],[19,8,2,3],[19,14,9,10,4],[19,20,21,16,11,5],[19,18,17,12,6],[19,18,13,7],[19,8],[19,14,9],[19,14,9,10],[19,20,21,16,11],[19,18,17,12],[19,18,13],[19,14],[19,20,15],[19,20,21,16],[19,18,17],[19,18],[19],[19,20],[19,20,21],[19,18,17,22],[19,18,23],[19,24],[19,25],[19,25,26],[19,25,26,27],[19,24,30,29,28],[19,24,30,29],[19,24,30],[19,25,31],[19,25,31,32],[19,25,31,32,33]],
      [[20,15,14,9,8,2,1,0],[20,15,14,9,8,2,1],[20,15,14,9,8,2],[20,15,14,9,3],[20,15,10,4],[20,21,16,11,5],[20,19,18,17,12,6],[20,15,14,9,8,7],[20,15,14,9,8],[20,15,14,9],[20,15,10],[20,21,16,11],[20,19,18,17,12],[20,19,18,13],[20,15,14],[20,15],[20,21,16],[20,19,18,17],[20,19,18],[20,19],[20],[20,21],[20,19,18,17,22],[20,19,18,23],[20,25,24],[20,25],[20,26],[20,21,27],[20,25,31,30,29,28],[20,25,31,30,29],[20,25,31,30],[20,25,31],[20,26,32],[20,21,27,33]],
      [[21,16,15,14,9,8,2,1,0],[21,16,15,14,9,8,2,1],[21,16,15,14,9,8,2],[21,16,15,14,9,3],[21,16,11,5,4],[21,16,11,5],[21,16,15,14,9,8,7,6],[21,16,15,14,9,8,7],[21,16,15,14,9,8],[21,16,15,14,9],[21,16,11,10],[21,16,11],[21,20,19,18,17,12],[21,20,19,18,13],[21,16,15,14],[21,16,15],[21,16],[21,20,19,18,17],[21,20,19,18],[21,20,19],[21,20],[21],[21,27,33,32,31,30,29,28,22],[21,27,26,25,24,23],[21,27,26,25,24],[21,27,26,25],[21,27,26],[21,27],[21,27,33,32,31,30,29,28],[21,27,33,32,31,30,29],[21,27,33,32,31,30],[21,27,33,32,31],[21,27,33,32],[21,27,33]],
      [[22,17,12,6,0],[22,17,12,6,7,1],[22,17,12,6,7,1,2],[22,17,12,6,7,1,2,3],[22,17,12,6,7,8,9,10,4],[22,17,12,6,7,8,9,10,4,5],[22,17,12,6],[22,17,12,6,7],[22,17,12,6,7,8],[22,17,12,6,7,8,9],[22,17,12,6,7,8,9,10],[22,17,12,6,7,8,9,10,11],[22,17,12],[22,17,12,13],[22,17,12,6,7,8,9,14],[22,17,12,6,7,8,9,14,15],[22,17,12,6,7,8,9,14,15,16],[22,17],[22,17,18],[22,17,18,19],[22,17,18,19,20],[22,28,29,30,31,32,33,27,21],[22],[22,23],[22,23,24],[22,28,29,30,31,25],[22,28,29,30,31,25,26],[22,28,29,30,31,32,33,27],[22,28],[22,28,29],[22,28,29,30],[22,28,29,30,31],[22,28,29,30,31,32],[22,28,29,30,31,32,33]],
      [[23,18,17,12,6,0],[23,18,13,7,1],[23,18,13,7,1,2],[23,18,13,7,1,2,3],[23,18,19,14,9,10,4],[23,24,25,26,27,21,16,11,5],[23,18,17,12,6],[23,18,13,7],[23,18,19,8],[23,18,19,14,9],[23,18,19,14,9,10],[23,24,25,26,27,21,16,11],[23,18,17,12],[23,18,13],[23,18,19,14],[23,18,19,20,15],[23,24,25,26,27,21,16],[23,18,17],[23,18],[23,18,19],[23,18,19,20],[23,24,25,26,27,21],[23,22],[23],[23,24],[23,24,25],[23,24,25,26],[23,24,25,26,27],[23,29,28],[23,29],[23,29,30],[23,24,25,31],[23,24,25,31,32],[23,24,25,31,32,33]],
      [[24,19,18,17,12,6,0],[24,19,18,13,7,1],[24,19,8,2],[24,19,8,2,3],[24,19,14,9,10,4],[24,25,26,27,21,16,11,5],[24,19,18,17,12,6],[24,19,18,13,7],[24,19,8],[24,19,14,9],[24,19,14,9,10],[24,25,26,27,21,16,11],[24,19,18,17,12],[24,19,18,13],[24,19,14],[24,25,20,15],[24,25,26,27,21,16],[24,19,18,17],[24,19,18],[24,19],[24,25,20],[24,25,26,27,21],[24,23,22],[24,23],[24],[24,25],[24,25,26],[24,25,26,27],[24,30,29,28],[24,30,29],[24,30],[24,25,31],[24,25,31,32],[24,25,31,32,33]],
      [[25,19,18,17,12,6,0],[25,19,18,13,7,1],[25,19,8,2],[25,20,15,14,9,3],[25,20,15,10,4],[25,26,27,21,16,11,5],[25,19,18,17,12,6],[25,19,18,13,7],[25,19,8],[25,20,15,14,9],[25,20,15,10],[25,26,27,21,16,11],[25,19,18,17,12],[25,19,18,13],[25,20,15,14],[25,20,15],[25,26,27,21,16],[25,19,18,17],[25,19,18],[25,19],[25,20],[25,26,27,21],[25,31,30,29,28,22],[25,24,23],[25,24],[25],[25,26],[25,26,27],[25,31,30,29,28],[25,31,30,29],[25,31,30],[25,31],[25,31,32],[25,31,32,33]],
      [[26,25,19,18,17,12,6,0],[26,20,15,14,9,8,2,1],[26,20,15,14,9,8,2],[26,20,15,14,9,3],[26,27,21,16,11,5,4],[26,27,21,16,11,5],[26,25,19,18,17,12,6],[26,25,19,18,13,7],[26,20,15,14,9,8],[26,20,15,14,9],[26,20,15,10],[26,27,21,16,11],[26,25,19,18,17,12],[26,25,19,18,13],[26,20,15,14],[26,20,15],[26,27,21,16],[26,25,19,18,17],[26,25,19,18],[26,25,19],[26,20],[26,27,21],[26,25,31,30,29,28,22],[26,25,24,23],[26,25,24],[26,25],[26],[26,27],[26,25,31,30,29,28],[26,25,31,30,29],[26,25,31,30],[26,25,31],[26,32],[26,27,33]],
      [[27,21,16,15,14,9,8,2,1,0],[27,21,16,15,14,9,8,2,1],[27,21,16,15,14,9,8,2],[27,21,16,15,14,9,3],[27,21,16,11,5,4],[27,21,16,11,5],[27,26,25,19,18,17,12,6],[27,21,16,15,14,9,8,7],[27,21,16,15,14,9,8],[27,21,16,15,14,9],[27,21,16,11,10],[27,21,16,11],[27,26,25,19,18,17,12],[27,26,25,19,18,13],[27,21,16,15,14],[27,21,16,15],[27,21,16],[27,26,25,19,18,17],[27,26,25,19,18],[27,26,25,19],[27,21,20],[27,21],[27,33,32,31,30,29,28,22],[27,26,25,24,23],[27,26,25,24],[27,26,25],[27,26],[27],[27,33,32,31,30,29,28],[27,33,32,31,30,29],[27,33,32,31,30],[27,33,32,31],[27,33,32],[27,33]],
      [[28,22,17,12,6,0],[28,22,17,12,6,7,1],[28,22,17,12,6,7,1,2],[28,22,17,12,6,7,1,2,3],[28,22,17,12,6,7,8,9,10,4],[28,29,30,31,32,33,27,21,16,11,5],[28,22,17,12,6],[28,22,17,12,6,7],[28,22,17,12,6,7,8],[28,22,17,12,6,7,8,9],[28,22,17,12,6,7,8,9,10],[28,29,30,31,32,33,27,21,16,11],[28,22,17,12],[28,22,17,12,13],[28,22,17,12,6,7,8,9,14],[28,22,17,12,6,7,8,9,14,15],[28,29,30,31,32,33,27,21,16],[28,22,17],[28,29,23,18],[28,29,30,24,19],[28,29,30,31,25,20],[28,29,30,31,32,33,27,21],[28,22],[28,29,23],[28,29,30,24],[28,29,30,31,25],[28,29,30,31,25,26],[28,29,30,31,32,33,27],[28],[28,29],[28,29,30],[28,29,30,31],[28,29,30,31,32],[28,29,30,31,32,33]],
      [[29,28,22,17,12,6,0],[29,28,22,17,12,6,7,1],[29,28,22,17,12,6,7,1,2],[29,28,22,17,12,6,7,1,2,3],[29,30,31,32,33,27,21,16,11,5,4],[29,30,31,32,33,27,21,16,11,5],[29,28,22,17,12,6],[29,28,22,17,12,6,7],[29,28,22,17,12,6,7,8],[29,28,22,17,12,6,7,8,9],[29,30,31,32,33,27,21,16,11,10],[29,30,31,32,33,27,21,16,11],[29,28,22,17,12],[29,23,18,13],[29,30,31,25,20,15,14],[29,30,31,25,20,15],[29,30,31,32,33,27,21,16],[29,28,22,17],[29,23,18],[29,30,24,19],[29,30,31,25,20],[29,30,31,32,33,27,21],[29,28,22],[29,23],[29,30,24],[29,30,31,25],[29,30,31,25,26],[29,30,31,32,33,27],[29,28],[29],[29,30],[29,30,31],[29,30,31,32],[29,30,31,32,33]],
      [[30,29,28,22,17,12,6,0],[30,29,28,22,17,12,6,7,1],[30,24,19,8,2],[30,24,19,8,2,3],[30,31,32,33,27,21,16,11,5,4],[30,31,32,33,27,21,16,11,5],[30,29,28,22,17,12,6],[30,29,28,22,17,12,6,7],[30,24,19,8],[30,31,32,33,27,21,16,15,14,9],[30,31,32,33,27,21,16,11,10],[30,31,32,33,27,21,16,11],[30,29,28,22,17,12],[30,24,19,18,13],[30,31,32,33,27,21,16,15,14],[30,31,32,33,27,21,16,15],[30,31,32,33,27,21,16],[30,29,28,22,17],[30,24,19,18],[30,24,19],[30,31,25,20],[30,31,32,33,27,21],[30,29,28,22],[30,29,23],[30,24],[30,31,25],[30,31,25,26],[30,31,32,33,27],[30,29,28],[30,29],[30],[30,31],[30,31,32],[30,31,32,33]],
      [[31,30,29,28,22,17,12,6,0],[31,30,29,28,22,17,12,6,7,1],[31,25,19,8,2],[31,32,33,27,21,16,15,14,9,3],[31,32,33,27,21,16,11,5,4],[31,32,33,27,21,16,11,5],[31,30,29,28,22,17,12,6],[31,30,29,28,22,17,12,6,7],[31,25,19,8],[31,32,33,27,21,16,15,14,9],[31,32,33,27,21,16,11,10],[31,32,33,27,21,16,11],[31,30,29,28,22,17,12],[31,25,19,18,13],[31,32,33,27,21,16,15,14],[31,32,33,27,21,16,15],[31,32,33,27,21,16],[31,30,29,28,22,17],[31,25,19,18],[31,25,19],[31,25,20],[31,32,33,27,21],[31,30,29,28,22],[31,25,24,23],[31,25,24],[31,25],[31,25,26],[31,32,33,27],[31,30,29,28],[31,30,29],[31,30],[31],[31,32],[31,32,33]],
      [[32,31,30,29,28,22,17,12,6,0],[32,31,30,29,28,22,17,12,6,7,1],[32,33,27,21,16,15,14,9,8,2],[32,33,27,21,16,15,14,9,3],[32,33,27,21,16,11,5,4],[32,33,27,21,16,11,5],[32,31,30,29,28,22,17,12,6],[32,31,30,29,28,22,17,12,6,7],[32,33,27,21,16,15,14,9,8],[32,33,27,21,16,15,14,9],[32,33,27,21,16,11,10],[32,33,27,21,16,11],[32,31,30,29,28,22,17,12],[32,31,25,19,18,13],[32,33,27,21,16,15,14],[32,33,27,21,16,15],[32,33,27,21,16],[32,31,30,29,28,22,17],[32,31,25,19,18],[32,31,25,19],[32,26,20],[32,33,27,21],[32,31,30,29,28,22],[32,31,25,24,23],[32,31,25,24],[32,31,25],[32,26],[32,33,27],[32,31,30,29,28],[32,31,30,29],[32,31,30],[32,31],[32],[32,33]],
      [[33,32,31,30,29,28,22,17,12,6,0],[33,27,21,16,15,14,9,8,2,1],[33,27,21,16,15,14,9,8,2],[33,27,21,16,15,14,9,3],[33,27,21,16,11,5,4],[33,27,21,16,11,5],[33,32,31,30,29,28,22,17,12,6],[33,27,21,16,15,14,9,8,7],[33,27,21,16,15,14,9,8],[33,27,21,16,15,14,9],[33,27,21,16,11,10],[33,27,21,16,11],[33,32,31,30,29,28,22,17,12],[33,32,31,25,19,18,13],[33,27,21,16,15,14],[33,27,21,16,15],[33,27,21,16],[33,32,31,30,29,28,22,17],[33,32,31,25,19,18],[33,32,31,25,19],[33,27,21,20],[33,27,21],[33,32,31,30,29,28,22],[33,32,31,25,24,23],[33,32,31,25,24],[33,32,31,25],[33,27,26],[33,27],[33,32,31,30,29,28],[33,32,31,30,29],[33,32,31,30],[33,32,31],[33,32],[33]]
      ]
###                                   #
capacity=[0,6,4,7,5,3,3,5,3,4,3,4,4,2,3,8,2,2,4,0,3,1,5,3,6,5,6,5,6,6,2,6,2,0]
need_borrow=[1,2,3,4,12,14,16,22,23,26]

class Robot:
    def __init__(self,location,speed):
        self.location=location
        self.speed=speed
        self.path=[]
        self.time=0



class Individual:
    def __init__(self):
        self.cost=0
        self.path=[]
        self.borrow=False
        
#得到不包含充电桩(0,33)和图书馆(19)的初始随机路径
def init_population(pop_size=200,num=34):
    population=[]
    for i in range(pop_size):
        individual=Individual()
        for j in range(num):
            if j not in [0,19,33]:
                individual.path.append(j)
        random.shuffle(individual.path)
        population.append(individual)
    return population

#得到实际路径，机器人书量到达10则返回图书馆
def get_actual_path(lst, threshold=10):
    result = []
    temp_sum = 0
    for num in lst:
        temp_sum += capacity[num]
        if temp_sum > threshold:
            result.append(19)
            temp_sum = capacity[num]  
        result.append(num)
    return result

def check(lst):
    nineteen_count = 0
    for i in range(len(lst)):
        if lst[i] == 19:
            nineteen_count += 1
            if nineteen_count == 2:
                for num in lst[:i]:
                    if num in need_borrow:
                        return True
                return False
    return False

#得到每个个体的代价
def set_cost(individual,robot1,robot2):
    actual_path=get_actual_path(individual.path)
    robot1.time=0
    robot2.time=0
    robot1.location=33
    robot2.location=0
    leisure_robot=(lambda x, y: x if x.time < y.time else y)(robot1, robot2)
    for i in actual_path:
        leisure_robot.time+=shortest_distance[leisure_robot.location][i]/leisure_robot.speed
        leisure_robot.location=i
        if i==19:
            leisure_robot=(lambda x, y: x if x.time < y.time else y)(robot1, robot2)
    individual.borrow=check(actual_path)
    robot1.time+=shortest_distance[robot1.location][33]/robot1.speed
    if robot1.location!=19:
        robot1.time+=shortest_distance[robot1.location][19]/robot1.speed
        robot1.location=19
    if robot2.location!=19:
        robot2.time+=shortest_distance[robot2.location][19]/robot2.speed
        robot2.location=19
    robotA.time+=shortest_distance[robotA.location][33]/robotA.speed
    robotB.time+=shortest_distance[robotB.location][0]/robotB.speed
    individual.cost=max(robot1.time,robot2.time)
    if individual.borrow:
       individual.cost+=0.3

def elitism_selection(population):
    sorted_population = sorted(population, key=lambda x: x.cost)
    quarter = len(sorted_population) // 4
    top_quarter = sorted_population[:quarter]
    middle_half = sorted_population[quarter: 3*quarter]
    bottom_quarter = sorted_population[3*quarter:]
    next_generation = copy.deepcopy(middle_half)
    next_generation.extend(top_quarter * 2)
    return next_generation

def tournament_selection(population,p=4):
    next_generation = []
    tournament_size = len(population) // p  
    while len(next_generation) < len(population):
        tournament_individuals = random.sample(population, tournament_size)
        sorted_tournament_individuals = sorted(tournament_individuals, key=lambda x: x.cost)
        next_generation.append(copy.deepcopy(sorted_tournament_individuals[0]))
    return next_generation



def roulette_wheel_selection(population):
    total_cost = sum(individual.cost for individual in population)
    selection_prob = [(total_cost - individual.cost) / total_cost for individual in population]
    prob_sum = sum(selection_prob)
    selection_prob = [prob / prob_sum for prob in selection_prob]
    num_individuals = len(population)
    next_generation = []
    for i in range(num_individuals):
        selected_index = random.choices(range(num_individuals), weights=selection_prob, k=1)[0]
        next_generation.append(copy.deepcopy(population[selected_index]))
    return next_generation

def mutate(individual,robot1,robot2,it,mutation_rate=0.15):
    new_individual=copy.deepcopy(individual)
    if random.random() < mutation_rate:
        size=len(individual.path)
        i, j = random.sample(range(size), 2)
        new_individual.path[i], new_individual.path[j] = new_individual.path[j], new_individual.path[i]
        set_cost(individual,robot1,robot2)
        set_cost(new_individual,robot1,robot2)
        if new_individual.cost < individual.cost:
            return new_individual
        else:
            if random.random() < np.exp(-(new_individual.cost - individual.cost)*it):
                return new_individual
            else:
                return individual
    return new_individual   

def pmx_cross(parent1, parent2,rate=0.5):
    if random.random() > rate:
        return parent1, parent2
    size = len(parent1.path)
    point1, point2 = sorted(random.sample(range(size), 2))
    temp1 = parent1.path[point1:point2+1]
    temp2 = parent2.path[point1:point2+1]
    child1Path, child2Path = list(parent1.path), list(parent2.path)
    child1Path[point1:point2+1], child2Path[point1:point2+1] = temp2, temp1
    # 3. 解决冲突 - 将匹配区域外相同的基因置换
    for i in list(range(point1)) + list(range(point2+1, size)) :
        while child1Path[i] in temp2:
            index = temp2.index(child1Path[i])
            child1Path[i] = temp1[index]
        while child2Path[i] in temp1:
            index = temp1.index(child2Path[i])
            child2Path[i] = temp2[index]
    child1=Individual()
    child2=Individual()
    child1.path=child1Path
    child2.path=child2Path
    return child1, child2

def random_removal(individual):
    size=len(individual.path)
    random_int  = random.randint(0,size-1)
    remove=individual.path.pop(random_int)
    return remove
           

def worst_removal(individual):
    size=len(individual.path)
    cost = [0]*size
    cost[0] = shortest_distance[0][individual.path[0]]
    cost[size-1] = shortest_distance[individual.path[size-1]][19]
    for i in range(1,size -1):
        cost[i] = shortest_distance[individual.path[i]][individual.path[i-1]] + shortest_distance[individual.path[i]][individual.path[i+1]]
    remove = individual.path.pop(cost.index(max(cost)))
    return remove


def shaw_removal(individual,alpha=0.8):
    size=len(individual.path)
    similarity = [0]*size
    random_node = random.choice(individual.path)
    for i in range(size):
        if i != random_node:
            similarity[i] = alpha*shortest_distance[individual.path[i]][random_node]
            actual_path=get_actual_path(individual.path)
            index1=actual_path.index(random_node)
            index2=actual_path.index(individual.path[i])
            if index1>index2:
                index1,index2=index2,index1
            if 19 not in actual_path[index1:index2]:
                similarity[i]+=(1-alpha)
    remove = individual.path.pop(similarity.index(max(similarity)))
    return remove

def rebuild(individual,remove):
    size=len(individual.path)
    best_position = []
    best_cost = float('inf')
    new_individual=copy.copy(individual)
    for position in range(size+1):
        new_individual.path.insert(position, remove)
        set_cost(new_individual,robotA,robotB)
        cost=new_individual.cost
        new_individual.path.remove(remove)
        if cost < best_cost:
            best_position = position
            best_cost = cost
    new_individual.path.insert(best_position, remove)
    
    return new_individual
   

def removeAndRebuild(individual,alpha=0.5):
    a=random.random()
    if a<0.4:
        remove=random_removal(individual)
    elif a>=0.4 and a<=0.5:
        remove=shaw_removal(individual,alpha)
    else:
        remove=worst_removal(individual)
    new_individual=rebuild(individual,remove)
    return new_individual


robotA=Robot(location=33,speed=8)
robotB=Robot(location=0,speed=10)
best_cost=[]
iteration=[]
#设置种群大小
population=init_population(pop_size=280)
best_solution= Individual()
best_solution.cost=float('inf')
for it in range(1,200):
    for individual in population:
        set_cost(individual,robotA,robotB)
        if individual.cost < best_solution.cost and individual.borrow==False:
            best_solution=copy.deepcopy(individual)
    sorted_population = sorted(population, key=lambda x: x.cost)
    if it %100==0:
        print(it/100)
    if it%10==0:
        best_cost.append(sorted_population[0].cost)
        iteration.append(it)
    population=elitism_selection(population)
    new_population=[]
    for _ in range(len(population) // 2):
        parent1 = random.choice(population)
        parent2 = random.choice(population)
        child1,child2= pmx_cross(parent1, parent2,rate=0.6)
        child1=mutate(child1,robotA,robotB,it,mutation_rate=0.2)
        child2=mutate(child2,robotA,robotB,it,mutation_rate=0.2)
        child1=removeAndRebuild(child1,alpha=0.1)
        child2=removeAndRebuild(child2,alpha=0.1)
        new_population.append(child1)
        new_population.append(child2)
    population=new_population
individual_last=sorted_population[0]
print(get_actual_path(best_solution.path))
print(best_solution.cost)
print(get_actual_path(individual_last.path))
print(individual_last.cost)


actual_path=get_actual_path(best_solution.path)
robotA.time=0
robotB.time=0
robotA.location=33
robotB.location=0

leisure_robot=(lambda x, y: x if x.time < y.time else y)(robotA, robotB)
for i in actual_path:
        leisure_robot.path.append(shortest_path[leisure_robot.location][i])
        leisure_robot.time+=shortest_distance[leisure_robot.location][i]/leisure_robot.speed
        leisure_robot.location=i
        if i==19:
            leisure_robot=(lambda x, y: x if x.time < y.time else y)(robotA, robotB)
if robotA.location!=19:
        robotA.time+=shortest_distance[robotA.location][19]/robotA.speed
        robotA.location=19
if robotB.location!=19:
        robotB.time+=shortest_distance[robotB.location][19]/robotB.speed
        robotB.location=19
robotA.time+=shortest_distance[robotA.location][33]/robotA.speed
robotB.time+=shortest_distance[robotB.location][0]/robotB.speed

print(f'robotA_time={robotA.time}')
print(f'robotA_location={robotA.location}')
print(f"robotA_path={robotA.path}")
print(f'robotB_time={robotB.time}')
print(f'robotB_location={robotB.location}')
print(f"robotB_path={robotB.path}")

    
print(iteration)
print(best_cost)


plt.figure()
#plt.subplot(2,1,1)
plt.plot(iteration,best_cost,'r',label='GA')
#plt.subplot(2,1,2)
#plt.plot(iteration2,best_cost2,'b',label='SA')
plt.show()
